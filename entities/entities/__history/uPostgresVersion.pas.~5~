unit uPostgresVersion;

interface

uses
  uInstanceController,

  System.Generics.Collections, FireDAC.Comp.Client, System.SysUtils;

type
  TPostgresVersion = class
    private
      FVersion: Integer;
      FId: Integer;
      FPathBinPG: String;
      FPostgresName: String;
    public
      property Id: Integer          read FId           write FId;
      property PostgresName: String read FPostgresName write FPostgresName;
      property Version: Integer     read FVersion      write FVersion;
      property PathBinPG : String   read FPathBinPG    write FPathBinPG;

      class function GetAllVersions : TObjectList<TPostgresVersion>;
  end;

implementation

{ TPostgresVersion }

class function TPostgresVersion.GetAllVersions: TObjectList<TPostgresVersion>;
var
  vQuery : TFDQuery;
  vPGVersion : TPostgresVersion;
begin
  vQuery := TInstanceController.GetInstance().Connection.GetQuery;
  try
    with vQuery do
    begin
      SQL.Text := 'SELECT version FROM tb_postgres_versions';
      Open;

      while not Eof do
      begin
        vPGVersion          := TPostgresVersion.Create;
        vPGVersion.FVersion := FieldByName('version').AsInteger;

        Result.Add(vPGVersion);
      Next;
      end;
    end;
  except
    raise Exception.Create('Erro ao pegar as versões no banco.');
  end;
end;


end.
