unit uPgDataFolderValidator;

interface

uses
  System.SysUtils,
  Winapi.Windows, System.Classes;

type
  TPgDataFolderValidator = (
    pgDataValid,
    pgDataPathNotFound,
    pgDataMissingBaseSubDir,
    pgDataMissingGlobalSubDir,
    pgDataMissingPgWalSubDir,
    pgDataMissingPostmasterPid,
    pgDataMissingPgVersionFile,
    pgDataInvalidPgVersionContent
  );

function IsPostgresDataFolder(const FolderPath : String;
                              out ValidationResult : TPgDataFolderValidator;
                              out VersionResult : String
                              ) : Boolean;

implementation

function IsPostgresDataFolder(const FolderPath: string;
                              out ValidationResult: TPgDataFolderValidator;
                              out VersionResult: string): Boolean;
var
  BaseDir: string;
  GlobalDir: string;
  PgWalDir: string;
  PgXlogDir: string;
  PostmasterPidFile: string;
  PostmasterOptsFile: string;
  PgVersionFile: string;
  PgVersionContent: TStringList;
begin
  Result := False;

  ValidationResult := pgDataPathNotFound;
  VersionResult := '';

  if not DirectoryExists(FolderPath) then
  begin
    ValidationResult := pgDataPathNotFound;
    Exit;
  end;

  BaseDir := IncludeTrailingPathDelimiter(FolderPath) + 'base';
  GlobalDir := IncludeTrailingPathDelimiter(FolderPath) + 'global';
  PgWalDir := IncludeTrailingPathDelimiter(FolderPath) + 'pg_wal';
  PgXlogDir := IncludeTrailingPathDelimiter(FolderPath) + 'pg_xlog';
  PostmasterPidFile := IncludeTrailingPathDelimiter(FolderPath) + 'postmaster.pid';
  PostmasterOptsFile := IncludeTrailingPathDelimiter(FolderPath) + 'postmaster.opts';
  PgVersionFile := IncludeTrailingPathDelimiter(FolderPath) + 'PG_VERSION';

// Verificar 'base'
  if not DirectoryExists(BaseDir) then
  begin
    ValidationResult := pgdvrMissingBaseSubDir;
    Exit;
  end;

  // Verificar 'global'
  if not DirectoryExists(GlobalDir) then
  begin
    ValidationResult := pgdvrMissingGlobalSubDir;
    Exit;
  end;

  // Verificar 'pg_wal' (ou 'pg_xlog' para versões mais antigas)
  if not DirectoryExists(PgWalDir) then
  begin
    if not DirectoryExists(PgXlogDir) then // Tenta a pasta antiga
    begin
      ValidationResult := pgdvrMissingPgWalSubDir;
      Exit;
    end;
  end;

  // 3. Verificar arquivos chave (opcional, mas bom para confirmar)
  if not (FileExists(PostmasterPidFile) or FileExists(PostmasterOptsFile)) then
  begin
    ValidationResult := pgdvrMissingPostmasterPid;
    Exit;
  end;

  // 4. Ler o arquivo PG_VERSION
  if not FileExists(PgVersionFile) then
  begin
    ValidationResult := pgdvrMissingPgVersionFile;
    Exit;
  end;

  PgVersionContent := TStringList.Create;
  try
    // Tenta carregar o conteúdo do arquivo PG_VERSION
    PgVersionContent.LoadFromFile(PgVersionFile);
    if PgVersionContent.Count > 0 then
    begin
      // A primeira linha do arquivo PG_VERSION geralmente contém a versão principal
      VersionResult := Trim(PgVersionContent[0]);
      // Podemos adicionar uma verificação básica para ver se a versão é numérica
      if not TryStrToFloat(StringReplace(VersionResult, '.', '', [rfReplaceAll]), Dummy) then // Usa TryStrToFloat para verificar se é um número
      begin
        // Se a versão não parecer um número, algo está errado
        ValidationResult := pgdvrInvalidPgVersionContent;
        Exit;
      end;
    end
    else
    begin
      // O arquivo está vazio
      ValidationResult := pgdvrInvalidPgVersionContent;
      Exit;
    end;
  except
    on E: Exception do
    begin
      // Erro ao ler o arquivo, por exemplo, permissões
      ValidationResult := pgdvrInvalidPgVersionContent;
      Exit;
    end;
  finally
    PgVersionContent.Free;
  end;

  // Se passou por todas as verificações, parece ser a pasta de dados do PostgreSQL
  ValidationResult := pgdvrValid;
  Result := True;
end;

end.
