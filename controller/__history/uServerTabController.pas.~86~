unit uServerTabController;

interface

uses
  uPostgresVersion,
  uConnectionParameters,

  uPgConnectionValidator,
  uPgDataFolderValidator,

  uShellController,

  System.Generics.Collections,
  System.Classes, Winapi.Windows,
  System.SysUtils;

type
  TServerTabController = class
    private



    public
      class function IsServerRunning(AParams: TConnectionParameters): Boolean;

      class function GetPathBin(AVersion: String): String;

      class function GetVersionsPostgres : TDictionary<string, String>;

      class function ValidateFields(AParams : TConnectionParameters; out AMessageError: String): Boolean;

      class function ValidateDataFolder(APathData: String;
                                        AVersion : String;
                                        out AMessageError: String): Boolean;

      class procedure InitializeServer(AParams : TConnectionParameters);
      class procedure StopServer(APathBin, APathData: string);
      class procedure UpdateFilePgHbgConf(AParams: TConnectionParameters);
  end;

implementation

{ TServerTabController }

class function TServerTabController.GetVersionsPostgres: TDictionary<string, String>;
var
  List : TObjectList<TPostgresVersion>;
  Dict : TDictionary<String, String>;
  Item : TPostgresVersion;
begin
  Dict := TDictionary<String, String>.Create;

  List := TPostgresVersion.GetAllVersions;
  try
    for Item in List do
      Dict.AddOrSetValue('Versao' + Item.Version, Item.Version);
  finally
    List.Free;
  end;

  Result := Dict;
end;


class function TServerTabController.GetPathBin(AVersion : String) : String;
begin
  Result := TPostgresVersion.FetchBinaryPathByVersion(AVersion);
end;


class function TServerTabController.ValidateFields(AParams : TConnectionParameters; out AMessageError : String) : Boolean;
begin
  Result := TPgConnectionValidator.ValidateConnectionParameters(AParams, AMessageError);
end;


class function TServerTabController.ValidateDataFolder(APathData: string; AVersion : String; out AMessageError : string): Boolean;
var
  ValidationResult : TPgDataFolderValidatorTypes;
  VersionPG : String;
begin
  Result := False;
  AMessageError:= '';

  if not TPgDataFolderValidator.IsPostgresDataFolder(APathData,AVersion, ValidationResult) then
  begin
    case ValidationResult of
      pgDataPathNotFound:
        AMessageError := 'O caminho especificado não foi encontrado.';
      pgDataMissingBaseSubDir:
        AMessageError := 'A pasta de dados do PostgreSQL deve conter o subdiretório "base".';
      pgDataMissingGlobalSubDir:
        AMessageError := 'A pasta de dados do PostgreSQL deve conter o subdiretório "global".';
      pgDataMissingPgWalSubDir:
        AMessageError := 'A pasta de dados do PostgreSQL deve conter o subdiretório "pg_wal" ou "pg_xlog".';
      pgDataMissingPostmasterPid:
        AMessageError := 'Aviso: A pasta de dados do PostgreSQL não contém "postmaster.pid" ou "postmaster.opts".';
      pgDataIncompatibleVersion:
        AMessageError := 'Selecione uma versão ou a pasta válida!';
      pgDataMissingPgVersionFile:
        AMessageError := 'O arquivo "PG_VERSION" não foi encontrado na pasta selecionada.';
      pgDataInvalidPgVersionContent:
        AMessageError := 'O conteúdo do arquivo "PG_VERSION" é inválido ou não pôde ser lido.';
      else
        raise Exception.Create('Erro ao validar a pasta DATA do postgres');

      Exit;
    end;

  end;


  if ValidationResult = pgDataValid then
    Result := True;

end;


class procedure TServerTabController.InitializeServer(AParams : TConnectionParameters);
begin
  TShellController.InitializeServer(AParams);
end;


class procedure TServerTabController.StopServer(APathBin : string; APathData : string);
begin
  TShellController.StopServer(APathBin,APathData);
end;


class function TServerTabController.IsServerRunning(AParams : TConnectionParameters) : Boolean;
begin
  Result := TShellController.IsServerRunning(AParams);
end;


class procedure TServerTabController.UpdateFilePgHbgConf(AParams : TConnectionParameters);
begin
  TShellController.UpdatePgHbaAuthToTrust(AParams);
end;

end.
